{"ast":null,"code":"/**\n * @private\n */\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\nimport { isUndefined, isString, isNumber } from \"./util.js\";\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"local\" || lowered === \"system\") return defaultZone;else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}","map":{"version":3,"names":["Zone","IANAZone","FixedOffsetZone","InvalidZone","isUndefined","isString","isNumber","normalizeZone","input","defaultZone","offset","lowered","toLowerCase","utcInstance","parseSpecifier","create","instance"],"sources":["C:/Frontend - Geoeste/client/node_modules/luxon/src/impl/zoneUtil.js"],"sourcesContent":["/**\n * @private\n */\n\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\n\nimport { isUndefined, isString, isNumber } from \"./util.js\";\n\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"local\" || lowered === \"system\") return defaultZone;\n    else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;\n    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,QAAhC,QAAgD,WAAhD;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,WAA9B,EAA2C;EAChD,IAAIC,MAAJ;;EACA,IAAIN,WAAW,CAACI,KAAD,CAAX,IAAsBA,KAAK,KAAK,IAApC,EAA0C;IACxC,OAAOC,WAAP;EACD,CAFD,MAEO,IAAID,KAAK,YAAYR,IAArB,EAA2B;IAChC,OAAOQ,KAAP;EACD,CAFM,MAEA,IAAIH,QAAQ,CAACG,KAAD,CAAZ,EAAqB;IAC1B,MAAMG,OAAO,GAAGH,KAAK,CAACI,WAAN,EAAhB;IACA,IAAID,OAAO,KAAK,OAAZ,IAAuBA,OAAO,KAAK,QAAvC,EAAiD,OAAOF,WAAP,CAAjD,KACK,IAAIE,OAAO,KAAK,KAAZ,IAAqBA,OAAO,KAAK,KAArC,EAA4C,OAAOT,eAAe,CAACW,WAAvB,CAA5C,KACA,OAAOX,eAAe,CAACY,cAAhB,CAA+BH,OAA/B,KAA2CV,QAAQ,CAACc,MAAT,CAAgBP,KAAhB,CAAlD;EACN,CALM,MAKA,IAAIF,QAAQ,CAACE,KAAD,CAAZ,EAAqB;IAC1B,OAAON,eAAe,CAACc,QAAhB,CAAyBR,KAAzB,CAAP;EACD,CAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACE,MAAnC,IAA6C,OAAOF,KAAK,CAACE,MAAb,KAAwB,QAAzE,EAAmF;IACxF;IACA;IACA,OAAOF,KAAP;EACD,CAJM,MAIA;IACL,OAAO,IAAIL,WAAJ,CAAgBK,KAAhB,CAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}